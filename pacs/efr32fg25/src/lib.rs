#![doc = "Peripheral access API for EFR32FG25A021F256IM56 microcontrollers (generated using svd2rust v0.37.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
//! # Optional features
//!
//! ## `rt`
//!
//! See [the `rt` feature](https://docs.rs/svd2rust/latest/svd2rust/index.html#the-rt-feature) of `svd2rust`.
//!
//! ## `cs`
//!
//! When this feature is enabled the PAC relies on a [`critical-section`](https://github.com/rust-embedded/critical-section) implementation.
//! This allows to implement [`Peripherals::take()`], a checked version of the unsafe [`Peripherals::steal()`].
//!
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
unsafe extern "C" {
    fn SMU_SECURE();
    fn SMU_S_PRIVILEGED();
    fn EMU();
    fn TIMER0();
    fn TIMER1();
    fn TIMER2();
    fn TIMER3();
    fn TIMER4();
    fn EUSART0_RX();
    fn EUSART0_TX();
    fn EUSART1_RX();
    fn EUSART1_TX();
    fn EUSART2_RX();
    fn EUSART2_TX();
    fn ICACHE0();
    fn BURTC();
    fn LETIMER0();
    fn SYSCFG();
    fn LDMA();
    fn LFXO();
    fn LFRCO();
    fn ULFRCO();
    fn GPIO_ODD();
    fn GPIO_EVEN();
    fn I2C0();
    fn I2C1();
    fn EMUDG();
    fn BUFC();
    fn ACMP0();
    fn ACMP1();
    fn WDOG0();
    fn WDOG1();
    fn HFXO0();
    fn HFRCO0();
    fn HFRCOEM23();
    fn CMU();
    fn AES();
    fn IADC();
    fn MSC();
    fn DPLL0();
    fn VDAC();
    fn PCNT0();
    fn SW0();
    fn SW1();
    fn SW2();
    fn SW3();
    fn SEMBRX();
    fn SEMBTX();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[unsafe(link_section = ".vector_table.interrupts")]
#[unsafe(no_mangle)]
pub static __INTERRUPTS: [Vector; 76] = [
    Vector {
        _handler: SMU_SECURE,
    },
    Vector {
        _handler: SMU_S_PRIVILEGED,
    },
    Vector { _reserved: 0 },
    Vector { _handler: EMU },
    Vector { _handler: TIMER0 },
    Vector { _handler: TIMER1 },
    Vector { _handler: TIMER2 },
    Vector { _handler: TIMER3 },
    Vector { _reserved: 0 },
    Vector { _handler: TIMER4 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: EUSART0_RX,
    },
    Vector {
        _handler: EUSART0_TX,
    },
    Vector {
        _handler: EUSART1_RX,
    },
    Vector {
        _handler: EUSART1_TX,
    },
    Vector {
        _handler: EUSART2_RX,
    },
    Vector {
        _handler: EUSART2_TX,
    },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: ICACHE0 },
    Vector { _handler: BURTC },
    Vector { _handler: LETIMER0 },
    Vector { _handler: SYSCFG },
    Vector { _reserved: 0 },
    Vector { _handler: LDMA },
    Vector { _handler: LFXO },
    Vector { _handler: LFRCO },
    Vector { _handler: ULFRCO },
    Vector { _handler: GPIO_ODD },
    Vector {
        _handler: GPIO_EVEN,
    },
    Vector { _handler: I2C0 },
    Vector { _handler: I2C1 },
    Vector { _handler: EMUDG },
    Vector { _reserved: 0 },
    Vector { _handler: BUFC },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: ACMP0 },
    Vector { _handler: ACMP1 },
    Vector { _handler: WDOG0 },
    Vector { _handler: WDOG1 },
    Vector { _handler: HFXO0 },
    Vector { _handler: HFRCO0 },
    Vector {
        _handler: HFRCOEM23,
    },
    Vector { _handler: CMU },
    Vector { _handler: AES },
    Vector { _handler: IADC },
    Vector { _handler: MSC },
    Vector { _handler: DPLL0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: VDAC },
    Vector { _handler: PCNT0 },
    Vector { _reserved: 0 },
    Vector { _handler: SW0 },
    Vector { _handler: SW1 },
    Vector { _handler: SW2 },
    Vector { _handler: SW3 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: SEMBRX },
    Vector { _handler: SEMBTX },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - SMU_SECURE"]
    SMU_SECURE = 0,
    #[doc = "1 - SMU_S_PRIVILEGED"]
    SMU_S_PRIVILEGED = 1,
    #[doc = "3 - EMU"]
    EMU = 3,
    #[doc = "4 - TIMER0"]
    TIMER0 = 4,
    #[doc = "5 - TIMER1"]
    TIMER1 = 5,
    #[doc = "6 - TIMER2"]
    TIMER2 = 6,
    #[doc = "7 - TIMER3"]
    TIMER3 = 7,
    #[doc = "9 - TIMER4"]
    TIMER4 = 9,
    #[doc = "13 - EUSART0_RX"]
    EUSART0_RX = 13,
    #[doc = "14 - EUSART0_TX"]
    EUSART0_TX = 14,
    #[doc = "15 - EUSART1_RX"]
    EUSART1_RX = 15,
    #[doc = "16 - EUSART1_TX"]
    EUSART1_TX = 16,
    #[doc = "17 - EUSART2_RX"]
    EUSART2_RX = 17,
    #[doc = "18 - EUSART2_TX"]
    EUSART2_TX = 18,
    #[doc = "23 - ICACHE0"]
    ICACHE0 = 23,
    #[doc = "24 - BURTC"]
    BURTC = 24,
    #[doc = "25 - LETIMER0"]
    LETIMER0 = 25,
    #[doc = "26 - SYSCFG"]
    SYSCFG = 26,
    #[doc = "28 - LDMA"]
    LDMA = 28,
    #[doc = "29 - LFXO"]
    LFXO = 29,
    #[doc = "30 - LFRCO"]
    LFRCO = 30,
    #[doc = "31 - ULFRCO"]
    ULFRCO = 31,
    #[doc = "32 - GPIO_ODD"]
    GPIO_ODD = 32,
    #[doc = "33 - GPIO_EVEN"]
    GPIO_EVEN = 33,
    #[doc = "34 - I2C0"]
    I2C0 = 34,
    #[doc = "35 - I2C1"]
    I2C1 = 35,
    #[doc = "36 - EMUDG"]
    EMUDG = 36,
    #[doc = "38 - BUFC"]
    BUFC = 38,
    #[doc = "47 - ACMP0"]
    ACMP0 = 47,
    #[doc = "48 - ACMP1"]
    ACMP1 = 48,
    #[doc = "49 - WDOG0"]
    WDOG0 = 49,
    #[doc = "50 - WDOG1"]
    WDOG1 = 50,
    #[doc = "51 - HFXO0"]
    HFXO0 = 51,
    #[doc = "52 - HFRCO0"]
    HFRCO0 = 52,
    #[doc = "53 - HFRCOEM23"]
    HFRCOEM23 = 53,
    #[doc = "54 - CMU"]
    CMU = 54,
    #[doc = "55 - AES"]
    AES = 55,
    #[doc = "56 - IADC"]
    IADC = 56,
    #[doc = "57 - MSC"]
    MSC = 57,
    #[doc = "58 - DPLL0"]
    DPLL0 = 58,
    #[doc = "61 - VDAC"]
    VDAC = 61,
    #[doc = "62 - PCNT0"]
    PCNT0 = 62,
    #[doc = "64 - SW0"]
    SW0 = 64,
    #[doc = "65 - SW1"]
    SW1 = 65,
    #[doc = "66 - SW2"]
    SW2 = 66,
    #[doc = "67 - SW3"]
    SW3 = 67,
    #[doc = "74 - SEMBRX"]
    SEMBRX = 74,
    #[doc = "75 - SEMBTX"]
    SEMBTX = 75,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "ACMP0_NS Registers"]
pub type Acmp0Ns = crate::Periph<acmp0_ns::RegisterBlock, 0x5900_8000>;
impl core::fmt::Debug for Acmp0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Acmp0Ns").finish()
    }
}
#[doc = "ACMP0_NS Registers"]
pub mod acmp0_ns;
#[doc = "ACMP0_S Registers"]
pub type Acmp0S = crate::Periph<acmp0_s::RegisterBlock, 0x4900_8000>;
impl core::fmt::Debug for Acmp0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Acmp0S").finish()
    }
}
#[doc = "ACMP0_S Registers"]
pub mod acmp0_s;
#[doc = "ACMP1_NS Registers"]
pub type Acmp1Ns = crate::Periph<acmp1_ns::RegisterBlock, 0x5900_c000>;
impl core::fmt::Debug for Acmp1Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Acmp1Ns").finish()
    }
}
#[doc = "ACMP1_NS Registers"]
pub mod acmp1_ns;
#[doc = "ACMP1_S Registers"]
pub type Acmp1S = crate::Periph<acmp1_s::RegisterBlock, 0x4900_c000>;
impl core::fmt::Debug for Acmp1S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Acmp1S").finish()
    }
}
#[doc = "ACMP1_S Registers"]
pub mod acmp1_s;
#[doc = "BUFC_NS Registers"]
pub type BufcNs = crate::Periph<bufc_ns::RegisterBlock, 0x5200_0000>;
impl core::fmt::Debug for BufcNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BufcNs").finish()
    }
}
#[doc = "BUFC_NS Registers"]
pub mod bufc_ns;
#[doc = "BUFC_S Registers"]
pub type BufcS = crate::Periph<bufc_s::RegisterBlock, 0x4200_0000>;
impl core::fmt::Debug for BufcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BufcS").finish()
    }
}
#[doc = "BUFC_S Registers"]
pub mod bufc_s;
#[doc = "BURAM_NS Registers"]
pub type BuramNs = crate::Periph<buram_ns::RegisterBlock, 0x5008_0000>;
impl core::fmt::Debug for BuramNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BuramNs").finish()
    }
}
#[doc = "BURAM_NS Registers"]
pub mod buram_ns;
#[doc = "BURAM_S Registers"]
pub type BuramS = crate::Periph<buram_s::RegisterBlock, 0x4008_0000>;
impl core::fmt::Debug for BuramS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BuramS").finish()
    }
}
#[doc = "BURAM_S Registers"]
pub mod buram_s;
#[doc = "BURTC_NS Registers"]
pub type BurtcNs = crate::Periph<burtc_ns::RegisterBlock, 0x5006_c000>;
impl core::fmt::Debug for BurtcNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BurtcNs").finish()
    }
}
#[doc = "BURTC_NS Registers"]
pub mod burtc_ns;
#[doc = "BURTC_S Registers"]
pub type BurtcS = crate::Periph<burtc_s::RegisterBlock, 0x4006_c000>;
impl core::fmt::Debug for BurtcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("BurtcS").finish()
    }
}
#[doc = "BURTC_S Registers"]
pub mod burtc_s;
#[doc = "CMU_NS Registers"]
pub type CmuNs = crate::Periph<cmu_ns::RegisterBlock, 0x5000_8000>;
impl core::fmt::Debug for CmuNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CmuNs").finish()
    }
}
#[doc = "CMU_NS Registers"]
pub mod cmu_ns;
#[doc = "CMU_S Registers"]
pub type CmuS = crate::Periph<cmu_s::RegisterBlock, 0x4000_8000>;
impl core::fmt::Debug for CmuS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("CmuS").finish()
    }
}
#[doc = "CMU_S Registers"]
pub mod cmu_s;
#[doc = "DCDC_NS Registers"]
pub type DcdcNs = crate::Periph<dcdc_ns::RegisterBlock, 0x5009_4000>;
impl core::fmt::Debug for DcdcNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DcdcNs").finish()
    }
}
#[doc = "DCDC_NS Registers"]
pub mod dcdc_ns;
#[doc = "DCDC_S Registers"]
pub type DcdcS = crate::Periph<dcdc_s::RegisterBlock, 0x4009_4000>;
impl core::fmt::Debug for DcdcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DcdcS").finish()
    }
}
#[doc = "DCDC_S Registers"]
pub mod dcdc_s;
#[doc = "DMEM_NS Registers"]
pub type DmemNs = crate::Periph<dmem_ns::RegisterBlock, 0x500c_0000>;
impl core::fmt::Debug for DmemNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DmemNs").finish()
    }
}
#[doc = "DMEM_NS Registers"]
pub mod dmem_ns;
#[doc = "DMEM_S Registers"]
pub type DmemS = crate::Periph<dmem_s::RegisterBlock, 0x400c_0000>;
impl core::fmt::Debug for DmemS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("DmemS").finish()
    }
}
#[doc = "DMEM_S Registers"]
pub mod dmem_s;
#[doc = "DPLL0_NS Registers"]
pub type Dpll0Ns = crate::Periph<dpll0_ns::RegisterBlock, 0x5001_c000>;
impl core::fmt::Debug for Dpll0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dpll0Ns").finish()
    }
}
#[doc = "DPLL0_NS Registers"]
pub mod dpll0_ns;
#[doc = "DPLL0_S Registers"]
pub type Dpll0S = crate::Periph<dpll0_s::RegisterBlock, 0x4001_c000>;
impl core::fmt::Debug for Dpll0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dpll0S").finish()
    }
}
#[doc = "DPLL0_S Registers"]
pub mod dpll0_s;
#[doc = "EMU_NS Registers"]
pub type EmuNs = crate::Periph<emu_ns::RegisterBlock, 0x5000_4000>;
impl core::fmt::Debug for EmuNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EmuNs").finish()
    }
}
#[doc = "EMU_NS Registers"]
pub mod emu_ns;
#[doc = "EMU_S Registers"]
pub type EmuS = crate::Periph<emu_s::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for EmuS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EmuS").finish()
    }
}
#[doc = "EMU_S Registers"]
pub mod emu_s;
#[doc = "ETAMPDET_NS Registers"]
pub type EtampdetNs = crate::Periph<etampdet_ns::RegisterBlock, 0x500d_0000>;
impl core::fmt::Debug for EtampdetNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EtampdetNs").finish()
    }
}
#[doc = "ETAMPDET_NS Registers"]
pub mod etampdet_ns;
#[doc = "ETAMPDET_S Registers"]
pub type EtampdetS = crate::Periph<etampdet_s::RegisterBlock, 0x400d_0000>;
impl core::fmt::Debug for EtampdetS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("EtampdetS").finish()
    }
}
#[doc = "ETAMPDET_S Registers"]
pub mod etampdet_s;
#[doc = "EUSART0_NS Registers"]
pub type Eusart0Ns = crate::Periph<eusart0_ns::RegisterBlock, 0x5b01_0000>;
impl core::fmt::Debug for Eusart0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart0Ns").finish()
    }
}
#[doc = "EUSART0_NS Registers"]
pub mod eusart0_ns;
#[doc = "EUSART0_S Registers"]
pub type Eusart0S = crate::Periph<eusart0_s::RegisterBlock, 0x4b01_0000>;
impl core::fmt::Debug for Eusart0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart0S").finish()
    }
}
#[doc = "EUSART0_S Registers"]
pub mod eusart0_s;
#[doc = "EUSART1_NS Registers"]
pub type Eusart1Ns = crate::Periph<eusart1_ns::RegisterBlock, 0x500a_0000>;
impl core::fmt::Debug for Eusart1Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart1Ns").finish()
    }
}
#[doc = "EUSART1_NS Registers"]
pub mod eusart1_ns;
#[doc = "EUSART1_S Registers"]
pub type Eusart1S = crate::Periph<eusart1_s::RegisterBlock, 0x400a_0000>;
impl core::fmt::Debug for Eusart1S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart1S").finish()
    }
}
#[doc = "EUSART1_S Registers"]
pub mod eusart1_s;
#[doc = "EUSART2_NS Registers"]
pub type Eusart2Ns = crate::Periph<eusart2_ns::RegisterBlock, 0x500a_4000>;
impl core::fmt::Debug for Eusart2Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart2Ns").finish()
    }
}
#[doc = "EUSART2_NS Registers"]
pub mod eusart2_ns;
#[doc = "EUSART2_S Registers"]
pub type Eusart2S = crate::Periph<eusart2_s::RegisterBlock, 0x400a_4000>;
impl core::fmt::Debug for Eusart2S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart2S").finish()
    }
}
#[doc = "EUSART2_S Registers"]
pub mod eusart2_s;
#[doc = "EUSART3_NS Registers"]
pub type Eusart3Ns = crate::Periph<eusart3_ns::RegisterBlock, 0x500a_8000>;
impl core::fmt::Debug for Eusart3Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart3Ns").finish()
    }
}
#[doc = "EUSART3_NS Registers"]
pub mod eusart3_ns;
#[doc = "EUSART3_S Registers"]
pub type Eusart3S = crate::Periph<eusart3_s::RegisterBlock, 0x400a_8000>;
impl core::fmt::Debug for Eusart3S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart3S").finish()
    }
}
#[doc = "EUSART3_S Registers"]
pub mod eusart3_s;
#[doc = "EUSART4_NS Registers"]
pub type Eusart4Ns = crate::Periph<eusart4_ns::RegisterBlock, 0x500a_c000>;
impl core::fmt::Debug for Eusart4Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart4Ns").finish()
    }
}
#[doc = "EUSART4_NS Registers"]
pub mod eusart4_ns;
#[doc = "EUSART4_S Registers"]
pub type Eusart4S = crate::Periph<eusart4_s::RegisterBlock, 0x400a_c000>;
impl core::fmt::Debug for Eusart4S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eusart4S").finish()
    }
}
#[doc = "EUSART4_S Registers"]
pub mod eusart4_s;
#[doc = "FSRCO_NS Registers"]
pub type FsrcoNs = crate::Periph<fsrco_ns::RegisterBlock, 0x5001_8000>;
impl core::fmt::Debug for FsrcoNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FsrcoNs").finish()
    }
}
#[doc = "FSRCO_NS Registers"]
pub mod fsrco_ns;
#[doc = "FSRCO_S Registers"]
pub type FsrcoS = crate::Periph<fsrco_s::RegisterBlock, 0x4001_8000>;
impl core::fmt::Debug for FsrcoS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("FsrcoS").finish()
    }
}
#[doc = "FSRCO_S Registers"]
pub mod fsrco_s;
#[doc = "GPCRC_NS Registers"]
pub type GpcrcNs = crate::Periph<gpcrc_ns::RegisterBlock, 0x5008_8000>;
impl core::fmt::Debug for GpcrcNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GpcrcNs").finish()
    }
}
#[doc = "GPCRC_NS Registers"]
pub mod gpcrc_ns;
#[doc = "GPCRC_S Registers"]
pub type GpcrcS = crate::Periph<gpcrc_s::RegisterBlock, 0x4008_8000>;
impl core::fmt::Debug for GpcrcS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GpcrcS").finish()
    }
}
#[doc = "GPCRC_S Registers"]
pub mod gpcrc_s;
#[doc = "GPIO_NS Registers"]
pub type GpioNs = crate::Periph<gpio_ns::RegisterBlock, 0x5003_c000>;
impl core::fmt::Debug for GpioNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GpioNs").finish()
    }
}
#[doc = "GPIO_NS Registers"]
pub mod gpio_ns;
#[doc = "GPIO_S Registers"]
pub type GpioS = crate::Periph<gpio_s::RegisterBlock, 0x4003_c000>;
impl core::fmt::Debug for GpioS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GpioS").finish()
    }
}
#[doc = "GPIO_S Registers"]
pub mod gpio_s;
#[doc = "HFRCO0_NS Registers"]
pub type Hfrco0Ns = crate::Periph<hfrco0_ns::RegisterBlock, 0x5001_0000>;
impl core::fmt::Debug for Hfrco0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hfrco0Ns").finish()
    }
}
#[doc = "HFRCO0_NS Registers"]
pub mod hfrco0_ns;
#[doc = "HFRCO0_S Registers"]
pub type Hfrco0S = crate::Periph<hfrco0_s::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Hfrco0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hfrco0S").finish()
    }
}
#[doc = "HFRCO0_S Registers"]
pub mod hfrco0_s;
#[doc = "HFRCOEM23_NS Registers"]
pub type Hfrcoem23Ns = crate::Periph<hfrcoem23_ns::RegisterBlock, 0x5a00_0000>;
impl core::fmt::Debug for Hfrcoem23Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hfrcoem23Ns").finish()
    }
}
#[doc = "HFRCOEM23_NS Registers"]
pub mod hfrcoem23_ns;
#[doc = "HFRCOEM23_S Registers"]
pub type Hfrcoem23S = crate::Periph<hfrcoem23_s::RegisterBlock, 0x4a00_0000>;
impl core::fmt::Debug for Hfrcoem23S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hfrcoem23S").finish()
    }
}
#[doc = "HFRCOEM23_S Registers"]
pub mod hfrcoem23_s;
#[doc = "HFXO0_NS Registers"]
pub type Hfxo0Ns = crate::Periph<hfxo0_ns::RegisterBlock, 0x5a00_4000>;
impl core::fmt::Debug for Hfxo0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hfxo0Ns").finish()
    }
}
#[doc = "HFXO0_NS Registers"]
pub mod hfxo0_ns;
#[doc = "HFXO0_S Registers"]
pub type Hfxo0S = crate::Periph<hfxo0_s::RegisterBlock, 0x4a00_4000>;
impl core::fmt::Debug for Hfxo0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Hfxo0S").finish()
    }
}
#[doc = "HFXO0_S Registers"]
pub mod hfxo0_s;
#[doc = "HOSTMAILBOX_NS Registers"]
pub type HostmailboxNs = crate::Periph<hostmailbox_ns::RegisterBlock, 0x5009_8000>;
impl core::fmt::Debug for HostmailboxNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HostmailboxNs").finish()
    }
}
#[doc = "HOSTMAILBOX_NS Registers"]
pub mod hostmailbox_ns;
#[doc = "HOSTMAILBOX_S Registers"]
pub type HostmailboxS = crate::Periph<hostmailbox_s::RegisterBlock, 0x4009_8000>;
impl core::fmt::Debug for HostmailboxS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("HostmailboxS").finish()
    }
}
#[doc = "HOSTMAILBOX_S Registers"]
pub mod hostmailbox_s;
#[doc = "I2C0_NS Registers"]
pub type I2c0Ns = crate::Periph<i2c0_ns::RegisterBlock, 0x5b00_0000>;
impl core::fmt::Debug for I2c0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c0Ns").finish()
    }
}
#[doc = "I2C0_NS Registers"]
pub mod i2c0_ns;
#[doc = "I2C0_S Registers"]
pub type I2c0S = crate::Periph<i2c0_s::RegisterBlock, 0x4b00_0000>;
impl core::fmt::Debug for I2c0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c0S").finish()
    }
}
#[doc = "I2C0_S Registers"]
pub mod i2c0_s;
#[doc = "I2C1_NS Registers"]
pub type I2c1Ns = crate::Periph<i2c1_ns::RegisterBlock, 0x5007_0000>;
impl core::fmt::Debug for I2c1Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1Ns").finish()
    }
}
#[doc = "I2C1_NS Registers"]
pub mod i2c1_ns;
#[doc = "I2C1_S Registers"]
pub type I2c1S = crate::Periph<i2c1_s::RegisterBlock, 0x4007_0000>;
impl core::fmt::Debug for I2c1S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1S").finish()
    }
}
#[doc = "I2C1_S Registers"]
pub mod i2c1_s;
#[doc = "IADC0_NS Registers"]
pub type Iadc0Ns = crate::Periph<iadc0_ns::RegisterBlock, 0x5900_4000>;
impl core::fmt::Debug for Iadc0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iadc0Ns").finish()
    }
}
#[doc = "IADC0_NS Registers"]
pub mod iadc0_ns;
#[doc = "IADC0_S Registers"]
pub type Iadc0S = crate::Periph<iadc0_s::RegisterBlock, 0x4900_4000>;
impl core::fmt::Debug for Iadc0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iadc0S").finish()
    }
}
#[doc = "IADC0_S Registers"]
pub mod iadc0_s;
#[doc = "ICACHE0_NS Registers"]
pub type Icache0Ns = crate::Periph<icache0_ns::RegisterBlock, 0x5003_4000>;
impl core::fmt::Debug for Icache0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Icache0Ns").finish()
    }
}
#[doc = "ICACHE0_NS Registers"]
pub mod icache0_ns;
#[doc = "ICACHE0_S Registers"]
pub type Icache0S = crate::Periph<icache0_s::RegisterBlock, 0x4003_4000>;
impl core::fmt::Debug for Icache0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Icache0S").finish()
    }
}
#[doc = "ICACHE0_S Registers"]
pub mod icache0_s;
#[doc = "LDMAXBAR_NS Registers"]
pub type LdmaxbarNs = crate::Periph<ldmaxbar_ns::RegisterBlock, 0x5004_4000>;
impl core::fmt::Debug for LdmaxbarNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LdmaxbarNs").finish()
    }
}
#[doc = "LDMAXBAR_NS Registers"]
pub mod ldmaxbar_ns;
#[doc = "LDMAXBAR_S Registers"]
pub type LdmaxbarS = crate::Periph<ldmaxbar_s::RegisterBlock, 0x4004_4000>;
impl core::fmt::Debug for LdmaxbarS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LdmaxbarS").finish()
    }
}
#[doc = "LDMAXBAR_S Registers"]
pub mod ldmaxbar_s;
#[doc = "LDMA_NS Registers"]
pub type LdmaNs = crate::Periph<ldma_ns::RegisterBlock, 0x5004_0000>;
impl core::fmt::Debug for LdmaNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LdmaNs").finish()
    }
}
#[doc = "LDMA_NS Registers"]
pub mod ldma_ns;
#[doc = "LDMA_S Registers"]
pub type LdmaS = crate::Periph<ldma_s::RegisterBlock, 0x4004_0000>;
impl core::fmt::Debug for LdmaS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LdmaS").finish()
    }
}
#[doc = "LDMA_S Registers"]
pub mod ldma_s;
// #[doc = "LESENSE_NS Registers"]
// pub type LesenseNs = crate::Periph<lesense_ns::RegisterBlock, 0x5903_8000>;
// impl core::fmt::Debug for LesenseNs {
//     fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
//         f.debug_struct("LesenseNs").finish()
//     }
// }
// #[doc = "LESENSE_NS Registers"]
// pub mod lesense_ns;
// #[doc = "LESENSE_S Registers"]
// pub type LesenseS = crate::Periph<lesense_s::RegisterBlock, 0x4903_8000>;
// impl core::fmt::Debug for LesenseS {
//     fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
//         f.debug_struct("LesenseS").finish()
//     }
// }
// #[doc = "LESENSE_S Registers"]
// pub mod lesense_s;
#[doc = "LETIMER0_NS Registers"]
pub type Letimer0Ns = crate::Periph<letimer0_ns::RegisterBlock, 0x5900_0000>;
impl core::fmt::Debug for Letimer0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Letimer0Ns").finish()
    }
}
#[doc = "LETIMER0_NS Registers"]
pub mod letimer0_ns;
#[doc = "LETIMER0_S Registers"]
pub type Letimer0S = crate::Periph<letimer0_s::RegisterBlock, 0x4900_0000>;
impl core::fmt::Debug for Letimer0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Letimer0S").finish()
    }
}
#[doc = "LETIMER0_S Registers"]
pub mod letimer0_s;
#[doc = "LFRCO_NS Registers"]
pub type LfrcoNs = crate::Periph<lfrco_ns::RegisterBlock, 0x5002_4000>;
impl core::fmt::Debug for LfrcoNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LfrcoNs").finish()
    }
}
#[doc = "LFRCO_NS Registers"]
pub mod lfrco_ns;
#[doc = "LFRCO_S Registers"]
pub type LfrcoS = crate::Periph<lfrco_s::RegisterBlock, 0x4002_4000>;
impl core::fmt::Debug for LfrcoS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LfrcoS").finish()
    }
}
#[doc = "LFRCO_S Registers"]
pub mod lfrco_s;
#[doc = "LFXO_NS Registers"]
pub type LfxoNs = crate::Periph<lfxo_ns::RegisterBlock, 0x5002_0000>;
impl core::fmt::Debug for LfxoNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LfxoNs").finish()
    }
}
#[doc = "LFXO_NS Registers"]
pub mod lfxo_ns;
#[doc = "LFXO_S Registers"]
pub type LfxoS = crate::Periph<lfxo_s::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for LfxoS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("LfxoS").finish()
    }
}
#[doc = "LFXO_S Registers"]
pub mod lfxo_s;
#[doc = "MPAHBRAM_NS Registers"]
pub type MpahbramNs = crate::Periph<mpahbram_ns::RegisterBlock, 0xb602_0000>;
impl core::fmt::Debug for MpahbramNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MpahbramNs").finish()
    }
}
#[doc = "MPAHBRAM_NS Registers"]
pub mod mpahbram_ns;
#[doc = "MPAHBRAM_S Registers"]
pub type MpahbramS = crate::Periph<mpahbram_s::RegisterBlock, 0xa602_0000>;
impl core::fmt::Debug for MpahbramS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MpahbramS").finish()
    }
}
#[doc = "MPAHBRAM_S Registers"]
pub mod mpahbram_s;
#[doc = "MSC_NS Registers"]
pub type MscNs = crate::Periph<msc_ns::RegisterBlock, 0x5003_0000>;
impl core::fmt::Debug for MscNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MscNs").finish()
    }
}
#[doc = "MSC_NS Registers"]
pub mod msc_ns;
#[doc = "MSC_S Registers"]
pub type MscS = crate::Periph<msc_s::RegisterBlock, 0x4003_0000>;
impl core::fmt::Debug for MscS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("MscS").finish()
    }
}
#[doc = "MSC_S Registers"]
pub mod msc_s;
#[doc = "PCNT0_NS Registers"]
pub type Pcnt0Ns = crate::Periph<pcnt0_ns::RegisterBlock, 0x5903_0000>;
impl core::fmt::Debug for Pcnt0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pcnt0Ns").finish()
    }
}
#[doc = "PCNT0_NS Registers"]
pub mod pcnt0_ns;
#[doc = "PCNT0_S Registers"]
pub type Pcnt0S = crate::Periph<pcnt0_s::RegisterBlock, 0x4903_0000>;
impl core::fmt::Debug for Pcnt0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pcnt0S").finish()
    }
}
#[doc = "PCNT0_S Registers"]
pub mod pcnt0_s;
#[doc = "PFMXPPRF_NS Registers"]
pub type PfmxpprfNs = crate::Periph<pfmxpprf_ns::RegisterBlock, 0x500c_4000>;
impl core::fmt::Debug for PfmxpprfNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PfmxpprfNs").finish()
    }
}
#[doc = "PFMXPPRF_NS Registers"]
pub mod pfmxpprf_ns;
#[doc = "PFMXPPRF_S Registers"]
pub type PfmxpprfS = crate::Periph<pfmxpprf_s::RegisterBlock, 0x400c_4000>;
impl core::fmt::Debug for PfmxpprfS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PfmxpprfS").finish()
    }
}
#[doc = "PFMXPPRF_S Registers"]
pub mod pfmxpprf_s;
#[doc = "PRS_NS Registers"]
pub type PrsNs = crate::Periph<prs_ns::RegisterBlock, 0x5003_8000>;
impl core::fmt::Debug for PrsNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PrsNs").finish()
    }
}
#[doc = "PRS_NS Registers"]
pub mod prs_ns;
#[doc = "PRS_S Registers"]
pub type PrsS = crate::Periph<prs_s::RegisterBlock, 0x4003_8000>;
impl core::fmt::Debug for PrsS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("PrsS").finish()
    }
}
#[doc = "PRS_S Registers"]
pub mod prs_s;
#[doc = "RADIOAES_NS Registers"]
pub type RadioaesNs = crate::Periph<radioaes_ns::RegisterBlock, 0x5400_0000>;
impl core::fmt::Debug for RadioaesNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RadioaesNs").finish()
    }
}
#[doc = "RADIOAES_NS Registers"]
pub mod radioaes_ns;
#[doc = "RADIOAES_S Registers"]
pub type RadioaesS = crate::Periph<radioaes_s::RegisterBlock, 0x4400_0000>;
impl core::fmt::Debug for RadioaesS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("RadioaesS").finish()
    }
}
#[doc = "RADIOAES_S Registers"]
pub mod radioaes_s;
#[doc = "RFFPLL0_NS Registers"]
pub type Rffpll0Ns = crate::Periph<rffpll0_ns::RegisterBlock, 0x500c_8000>;
impl core::fmt::Debug for Rffpll0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rffpll0Ns").finish()
    }
}
#[doc = "RFFPLL0_NS Registers"]
pub mod rffpll0_ns;
#[doc = "RFFPLL0_S Registers"]
pub type Rffpll0S = crate::Periph<rffpll0_s::RegisterBlock, 0x400c_8000>;
impl core::fmt::Debug for Rffpll0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rffpll0S").finish()
    }
}
#[doc = "RFFPLL0_S Registers"]
pub mod rffpll0_s;
#[doc = "SCRATCHPAD_NS Registers"]
pub type ScratchpadNs = crate::Periph<scratchpad_ns::RegisterBlock, 0x5000_0000>;
impl core::fmt::Debug for ScratchpadNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ScratchpadNs").finish()
    }
}
#[doc = "SCRATCHPAD_NS Registers"]
pub mod scratchpad_ns;
#[doc = "SCRATCHPAD_S Registers"]
pub type ScratchpadS = crate::Periph<scratchpad_s::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for ScratchpadS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("ScratchpadS").finish()
    }
}
#[doc = "SCRATCHPAD_S Registers"]
pub mod scratchpad_s;
#[doc = "SEMAILBOX_NS_HOST Registers"]
pub type SemailboxNsHost = crate::Periph<semailbox_ns_host::RegisterBlock, 0x5c00_0000>;
impl core::fmt::Debug for SemailboxNsHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SemailboxNsHost").finish()
    }
}
#[doc = "SEMAILBOX_NS_HOST Registers"]
pub mod semailbox_ns_host;
#[doc = "SEMAILBOX_S_HOST Registers"]
pub type SemailboxSHost = crate::Periph<semailbox_s_host::RegisterBlock, 0x4c00_0000>;
impl core::fmt::Debug for SemailboxSHost {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SemailboxSHost").finish()
    }
}
#[doc = "SEMAILBOX_S_HOST Registers"]
pub mod semailbox_s_host;
#[doc = "SMU_NS Registers"]
pub type SmuNs = crate::Periph<smu_ns::RegisterBlock, 0x5400_8000>;
impl core::fmt::Debug for SmuNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SmuNs").finish()
    }
}
#[doc = "SMU_NS Registers"]
pub mod smu_ns;
#[doc = "SMU_NS_CFGNS Registers"]
pub type SmuNsCfgns = crate::Periph<smu_ns_cfgns::RegisterBlock, 0x5400_c000>;
impl core::fmt::Debug for SmuNsCfgns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SmuNsCfgns").finish()
    }
}
#[doc = "SMU_NS_CFGNS Registers"]
pub mod smu_ns_cfgns;
#[doc = "SMU_S Registers"]
pub type SmuS = crate::Periph<smu_s::RegisterBlock, 0x4400_8000>;
impl core::fmt::Debug for SmuS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SmuS").finish()
    }
}
#[doc = "SMU_S Registers"]
pub mod smu_s;
#[doc = "SMU_S_CFGNS Registers"]
pub type SmuSCfgns = crate::Periph<smu_s_cfgns::RegisterBlock, 0x4400_c000>;
impl core::fmt::Debug for SmuSCfgns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SmuSCfgns").finish()
    }
}
#[doc = "SMU_S_CFGNS Registers"]
pub mod smu_s_cfgns;
#[doc = "SYSCFG_NS Registers"]
pub type SyscfgNs = crate::Periph<syscfg_ns::RegisterBlock, 0x5007_c000>;
impl core::fmt::Debug for SyscfgNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SyscfgNs").finish()
    }
}
#[doc = "SYSCFG_NS Registers"]
pub mod syscfg_ns;
#[doc = "SYSCFG_NS_CFGNS Registers"]
pub type SyscfgNsCfgns = crate::Periph<syscfg_ns_cfgns::RegisterBlock, 0x5007_8000>;
impl core::fmt::Debug for SyscfgNsCfgns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SyscfgNsCfgns").finish()
    }
}
#[doc = "SYSCFG_NS_CFGNS Registers"]
pub mod syscfg_ns_cfgns;
#[doc = "SYSCFG_S Registers"]
pub type SyscfgS = crate::Periph<syscfg_s::RegisterBlock, 0x4007_c000>;
impl core::fmt::Debug for SyscfgS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SyscfgS").finish()
    }
}
#[doc = "SYSCFG_S Registers"]
pub mod syscfg_s;
#[doc = "SYSCFG_S_CFGNS Registers"]
pub type SyscfgSCfgns = crate::Periph<syscfg_s_cfgns::RegisterBlock, 0x4007_8000>;
impl core::fmt::Debug for SyscfgSCfgns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("SyscfgSCfgns").finish()
    }
}
#[doc = "SYSCFG_S_CFGNS Registers"]
pub mod syscfg_s_cfgns;
#[doc = "SYSRTC0_NS Registers"]
pub type Sysrtc0Ns = crate::Periph<sysrtc0_ns::RegisterBlock, 0x500b_0000>;
impl core::fmt::Debug for Sysrtc0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sysrtc0Ns").finish()
    }
}
#[doc = "SYSRTC0_NS Registers"]
pub mod sysrtc0_ns;
#[doc = "SYSRTC0_S Registers"]
pub type Sysrtc0S = crate::Periph<sysrtc0_s::RegisterBlock, 0x400b_0000>;
impl core::fmt::Debug for Sysrtc0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sysrtc0S").finish()
    }
}
#[doc = "SYSRTC0_S Registers"]
pub mod sysrtc0_s;
#[doc = "TIMER0_NS Registers"]
pub type Timer0Ns = crate::Periph<timer0_ns::RegisterBlock, 0x5004_8000>;
impl core::fmt::Debug for Timer0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer0Ns").finish()
    }
}
#[doc = "TIMER0_NS Registers"]
pub mod timer0_ns;
#[doc = "TIMER0_S Registers"]
pub type Timer0S = crate::Periph<timer0_s::RegisterBlock, 0x4004_8000>;
impl core::fmt::Debug for Timer0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer0S").finish()
    }
}
#[doc = "TIMER0_S Registers"]
pub mod timer0_s;
#[doc = "TIMER1_NS Registers"]
pub type Timer1Ns = crate::Periph<timer1_ns::RegisterBlock, 0x5004_c000>;
impl core::fmt::Debug for Timer1Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer1Ns").finish()
    }
}
#[doc = "TIMER1_NS Registers"]
pub mod timer1_ns;
#[doc = "TIMER1_S Registers"]
pub type Timer1S = crate::Periph<timer1_s::RegisterBlock, 0x4004_c000>;
impl core::fmt::Debug for Timer1S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer1S").finish()
    }
}
#[doc = "TIMER1_S Registers"]
pub mod timer1_s;
#[doc = "TIMER2_NS Registers"]
pub type Timer2Ns = crate::Periph<timer2_ns::RegisterBlock, 0x5005_0000>;
impl core::fmt::Debug for Timer2Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer2Ns").finish()
    }
}
#[doc = "TIMER2_NS Registers"]
pub mod timer2_ns;
#[doc = "TIMER2_S Registers"]
pub type Timer2S = crate::Periph<timer2_s::RegisterBlock, 0x4005_0000>;
impl core::fmt::Debug for Timer2S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer2S").finish()
    }
}
#[doc = "TIMER2_S Registers"]
pub mod timer2_s;
#[doc = "TIMER3_NS Registers"]
pub type Timer3Ns = crate::Periph<timer3_ns::RegisterBlock, 0x5005_4000>;
impl core::fmt::Debug for Timer3Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer3Ns").finish()
    }
}
#[doc = "TIMER3_NS Registers"]
pub mod timer3_ns;
#[doc = "TIMER3_S Registers"]
pub type Timer3S = crate::Periph<timer3_s::RegisterBlock, 0x4005_4000>;
impl core::fmt::Debug for Timer3S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer3S").finish()
    }
}
#[doc = "TIMER3_S Registers"]
pub mod timer3_s;
#[doc = "TIMER4_NS Registers"]
pub type Timer4Ns = crate::Periph<timer4_ns::RegisterBlock, 0x5005_8000>;
impl core::fmt::Debug for Timer4Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer4Ns").finish()
    }
}
#[doc = "TIMER4_NS Registers"]
pub mod timer4_ns;
#[doc = "TIMER4_S Registers"]
pub type Timer4S = crate::Periph<timer4_s::RegisterBlock, 0x4005_8000>;
impl core::fmt::Debug for Timer4S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer4S").finish()
    }
}
#[doc = "TIMER4_S Registers"]
pub mod timer4_s;
#[doc = "TIMER5_NS Registers"]
pub type Timer5Ns = crate::Periph<timer5_ns::RegisterBlock, 0x5005_c000>;
impl core::fmt::Debug for Timer5Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer5Ns").finish()
    }
}
#[doc = "TIMER5_NS Registers"]
pub mod timer5_ns;
#[doc = "TIMER5_S Registers"]
pub type Timer5S = crate::Periph<timer5_s::RegisterBlock, 0x4005_c000>;
impl core::fmt::Debug for Timer5S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer5S").finish()
    }
}
#[doc = "TIMER5_S Registers"]
pub mod timer5_s;
#[doc = "TIMER6_NS Registers"]
pub type Timer6Ns = crate::Periph<timer6_ns::RegisterBlock, 0x5006_0000>;
impl core::fmt::Debug for Timer6Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer6Ns").finish()
    }
}
#[doc = "TIMER6_NS Registers"]
pub mod timer6_ns;
#[doc = "TIMER6_S Registers"]
pub type Timer6S = crate::Periph<timer6_s::RegisterBlock, 0x4006_0000>;
impl core::fmt::Debug for Timer6S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer6S").finish()
    }
}
#[doc = "TIMER6_S Registers"]
pub mod timer6_s;
#[doc = "TIMER7_NS Registers"]
pub type Timer7Ns = crate::Periph<timer7_ns::RegisterBlock, 0x5006_4000>;
impl core::fmt::Debug for Timer7Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer7Ns").finish()
    }
}
#[doc = "TIMER7_NS Registers"]
pub mod timer7_ns;
#[doc = "TIMER7_S Registers"]
pub type Timer7S = crate::Periph<timer7_s::RegisterBlock, 0x4006_4000>;
impl core::fmt::Debug for Timer7S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer7S").finish()
    }
}
#[doc = "TIMER7_S Registers"]
pub mod timer7_s;
#[doc = "ULFRCO_NS Registers"]
pub type UlfrcoNs = crate::Periph<ulfrco_ns::RegisterBlock, 0x5002_8000>;
impl core::fmt::Debug for UlfrcoNs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UlfrcoNs").finish()
    }
}
#[doc = "ULFRCO_NS Registers"]
pub mod ulfrco_ns;
#[doc = "ULFRCO_S Registers"]
pub type UlfrcoS = crate::Periph<ulfrco_s::RegisterBlock, 0x4002_8000>;
impl core::fmt::Debug for UlfrcoS {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UlfrcoS").finish()
    }
}
#[doc = "ULFRCO_S Registers"]
pub mod ulfrco_s;
// #[doc = "USBAHB_NS_AHBS Registers"]
// pub type UsbahbNsAhbs = crate::Periph<usbahb_ns_ahbs::RegisterBlock, 0x5600_0000>;
// impl core::fmt::Debug for UsbahbNsAhbs {
//     fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
//         f.debug_struct("UsbahbNsAhbs").finish()
//     }
// }
// #[doc = "USBAHB_NS_AHBS Registers"]
// pub mod usbahb_ns_ahbs;
// #[doc = "USBAHB_S_AHBS Registers"]
// pub type UsbahbSAhbs = crate::Periph<usbahb_s_ahbs::RegisterBlock, 0x4600_0000>;
// impl core::fmt::Debug for UsbahbSAhbs {
//     fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
//         f.debug_struct("UsbahbSAhbs").finish()
//     }
// }
// #[doc = "USBAHB_S_AHBS Registers"]
// pub mod usbahb_s_ahbs;
#[doc = "USBPLL0_NS Registers"]
pub type Usbpll0Ns = crate::Periph<usbpll0_ns::RegisterBlock, 0x5700_4000>;
impl core::fmt::Debug for Usbpll0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbpll0Ns").finish()
    }
}
#[doc = "USBPLL0_NS Registers"]
pub mod usbpll0_ns;
#[doc = "USBPLL0_S Registers"]
pub type Usbpll0S = crate::Periph<usbpll0_s::RegisterBlock, 0x4700_4000>;
impl core::fmt::Debug for Usbpll0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbpll0S").finish()
    }
}
#[doc = "USBPLL0_S Registers"]
pub mod usbpll0_s;
#[doc = "USB_NS_APBS Registers"]
pub type UsbNsApbs = crate::Periph<usb_ns_apbs::RegisterBlock, 0x5700_0000>;
impl core::fmt::Debug for UsbNsApbs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UsbNsApbs").finish()
    }
}
#[doc = "USB_NS_APBS Registers"]
pub mod usb_ns_apbs;
#[doc = "USB_S_APBS Registers"]
pub type UsbSApbs = crate::Periph<usb_s_apbs::RegisterBlock, 0x4700_0000>;
impl core::fmt::Debug for UsbSApbs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("UsbSApbs").finish()
    }
}
#[doc = "USB_S_APBS Registers"]
pub mod usb_s_apbs;
#[doc = "VDAC0_NS Registers"]
pub type Vdac0Ns = crate::Periph<vdac0_ns::RegisterBlock, 0x5902_4000>;
impl core::fmt::Debug for Vdac0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Vdac0Ns").finish()
    }
}
#[doc = "VDAC0_NS Registers"]
pub mod vdac0_ns;
#[doc = "VDAC0_S Registers"]
pub type Vdac0S = crate::Periph<vdac0_s::RegisterBlock, 0x4902_4000>;
impl core::fmt::Debug for Vdac0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Vdac0S").finish()
    }
}
#[doc = "VDAC0_S Registers"]
pub mod vdac0_s;
#[doc = "WDOG0_NS Registers"]
pub type Wdog0Ns = crate::Periph<wdog0_ns::RegisterBlock, 0x5b00_4000>;
impl core::fmt::Debug for Wdog0Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdog0Ns").finish()
    }
}
#[doc = "WDOG0_NS Registers"]
pub mod wdog0_ns;
#[doc = "WDOG0_S Registers"]
pub type Wdog0S = crate::Periph<wdog0_s::RegisterBlock, 0x4b00_4000>;
impl core::fmt::Debug for Wdog0S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdog0S").finish()
    }
}
#[doc = "WDOG0_S Registers"]
pub mod wdog0_s;
#[doc = "WDOG1_NS Registers"]
pub type Wdog1Ns = crate::Periph<wdog1_ns::RegisterBlock, 0x5b00_8000>;
impl core::fmt::Debug for Wdog1Ns {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdog1Ns").finish()
    }
}
#[doc = "WDOG1_NS Registers"]
pub mod wdog1_ns;
#[doc = "WDOG1_S Registers"]
pub type Wdog1S = crate::Periph<wdog1_s::RegisterBlock, 0x4b00_8000>;
impl core::fmt::Debug for Wdog1S {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdog1S").finish()
    }
}
#[doc = "WDOG1_S Registers"]
pub mod wdog1_s;
#[doc = "DEVINFO Registers"]
pub type Devinfo = crate::Periph<devinfo::RegisterBlock, 0x0fe0_8000>;
impl core::fmt::Debug for Devinfo {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Devinfo").finish()
    }
}
#[doc = "DEVINFO Registers"]
pub mod devinfo;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "ACMP0_NS"]
    pub acmp0_ns: Acmp0Ns,
    #[doc = "ACMP0_S"]
    pub acmp0_s: Acmp0S,
    #[doc = "ACMP1_NS"]
    pub acmp1_ns: Acmp1Ns,
    #[doc = "ACMP1_S"]
    pub acmp1_s: Acmp1S,
    #[doc = "BUFC_NS"]
    pub bufc_ns: BufcNs,
    #[doc = "BUFC_S"]
    pub bufc_s: BufcS,
    #[doc = "BURAM_NS"]
    pub buram_ns: BuramNs,
    #[doc = "BURAM_S"]
    pub buram_s: BuramS,
    #[doc = "BURTC_NS"]
    pub burtc_ns: BurtcNs,
    #[doc = "BURTC_S"]
    pub burtc_s: BurtcS,
    #[doc = "CMU_NS"]
    pub cmu_ns: CmuNs,
    #[doc = "CMU_S"]
    pub cmu_s: CmuS,
    #[doc = "DCDC_NS"]
    pub dcdc_ns: DcdcNs,
    #[doc = "DCDC_S"]
    pub dcdc_s: DcdcS,
    #[doc = "DMEM_NS"]
    pub dmem_ns: DmemNs,
    #[doc = "DMEM_S"]
    pub dmem_s: DmemS,
    #[doc = "DPLL0_NS"]
    pub dpll0_ns: Dpll0Ns,
    #[doc = "DPLL0_S"]
    pub dpll0_s: Dpll0S,
    #[doc = "EMU_NS"]
    pub emu_ns: EmuNs,
    #[doc = "EMU_S"]
    pub emu_s: EmuS,
    #[doc = "ETAMPDET_NS"]
    pub etampdet_ns: EtampdetNs,
    #[doc = "ETAMPDET_S"]
    pub etampdet_s: EtampdetS,
    #[doc = "EUSART0_NS"]
    pub eusart0_ns: Eusart0Ns,
    #[doc = "EUSART0_S"]
    pub eusart0_s: Eusart0S,
    #[doc = "EUSART1_NS"]
    pub eusart1_ns: Eusart1Ns,
    #[doc = "EUSART1_S"]
    pub eusart1_s: Eusart1S,
    #[doc = "EUSART2_NS"]
    pub eusart2_ns: Eusart2Ns,
    #[doc = "EUSART2_S"]
    pub eusart2_s: Eusart2S,
    #[doc = "EUSART3_NS"]
    pub eusart3_ns: Eusart3Ns,
    #[doc = "EUSART3_S"]
    pub eusart3_s: Eusart3S,
    #[doc = "EUSART4_NS"]
    pub eusart4_ns: Eusart4Ns,
    #[doc = "EUSART4_S"]
    pub eusart4_s: Eusart4S,
    #[doc = "FSRCO_NS"]
    pub fsrco_ns: FsrcoNs,
    #[doc = "FSRCO_S"]
    pub fsrco_s: FsrcoS,
    #[doc = "GPCRC_NS"]
    pub gpcrc_ns: GpcrcNs,
    #[doc = "GPCRC_S"]
    pub gpcrc_s: GpcrcS,
    #[doc = "GPIO_NS"]
    pub gpio_ns: GpioNs,
    #[doc = "GPIO_S"]
    pub gpio_s: GpioS,
    #[doc = "HFRCO0_NS"]
    pub hfrco0_ns: Hfrco0Ns,
    #[doc = "HFRCO0_S"]
    pub hfrco0_s: Hfrco0S,
    #[doc = "HFRCOEM23_NS"]
    pub hfrcoem23_ns: Hfrcoem23Ns,
    #[doc = "HFRCOEM23_S"]
    pub hfrcoem23_s: Hfrcoem23S,
    #[doc = "HFXO0_NS"]
    pub hfxo0_ns: Hfxo0Ns,
    #[doc = "HFXO0_S"]
    pub hfxo0_s: Hfxo0S,
    #[doc = "HOSTMAILBOX_NS"]
    pub hostmailbox_ns: HostmailboxNs,
    #[doc = "HOSTMAILBOX_S"]
    pub hostmailbox_s: HostmailboxS,
    #[doc = "I2C0_NS"]
    pub i2c0_ns: I2c0Ns,
    #[doc = "I2C0_S"]
    pub i2c0_s: I2c0S,
    #[doc = "I2C1_NS"]
    pub i2c1_ns: I2c1Ns,
    #[doc = "I2C1_S"]
    pub i2c1_s: I2c1S,
    #[doc = "IADC0_NS"]
    pub iadc0_ns: Iadc0Ns,
    #[doc = "IADC0_S"]
    pub iadc0_s: Iadc0S,
    #[doc = "ICACHE0_NS"]
    pub icache0_ns: Icache0Ns,
    #[doc = "ICACHE0_S"]
    pub icache0_s: Icache0S,
    #[doc = "LDMAXBAR_NS"]
    pub ldmaxbar_ns: LdmaxbarNs,
    #[doc = "LDMAXBAR_S"]
    pub ldmaxbar_s: LdmaxbarS,
    #[doc = "LDMA_NS"]
    pub ldma_ns: LdmaNs,
    #[doc = "LDMA_S"]
    pub ldma_s: LdmaS,
    // #[doc = "LESENSE_NS"]
    // pub lesense_ns: LesenseNs,
    // #[doc = "LESENSE_S"]
    // pub lesense_s: LesenseS,
    #[doc = "LETIMER0_NS"]
    pub letimer0_ns: Letimer0Ns,
    #[doc = "LETIMER0_S"]
    pub letimer0_s: Letimer0S,
    #[doc = "LFRCO_NS"]
    pub lfrco_ns: LfrcoNs,
    #[doc = "LFRCO_S"]
    pub lfrco_s: LfrcoS,
    #[doc = "LFXO_NS"]
    pub lfxo_ns: LfxoNs,
    #[doc = "LFXO_S"]
    pub lfxo_s: LfxoS,
    #[doc = "MPAHBRAM_NS"]
    pub mpahbram_ns: MpahbramNs,
    #[doc = "MPAHBRAM_S"]
    pub mpahbram_s: MpahbramS,
    #[doc = "MSC_NS"]
    pub msc_ns: MscNs,
    #[doc = "MSC_S"]
    pub msc_s: MscS,
    #[doc = "PCNT0_NS"]
    pub pcnt0_ns: Pcnt0Ns,
    #[doc = "PCNT0_S"]
    pub pcnt0_s: Pcnt0S,
    #[doc = "PFMXPPRF_NS"]
    pub pfmxpprf_ns: PfmxpprfNs,
    #[doc = "PFMXPPRF_S"]
    pub pfmxpprf_s: PfmxpprfS,
    #[doc = "PRS_NS"]
    pub prs_ns: PrsNs,
    #[doc = "PRS_S"]
    pub prs_s: PrsS,
    #[doc = "RADIOAES_NS"]
    pub radioaes_ns: RadioaesNs,
    #[doc = "RADIOAES_S"]
    pub radioaes_s: RadioaesS,
    #[doc = "RFFPLL0_NS"]
    pub rffpll0_ns: Rffpll0Ns,
    #[doc = "RFFPLL0_S"]
    pub rffpll0_s: Rffpll0S,
    #[doc = "SCRATCHPAD_NS"]
    pub scratchpad_ns: ScratchpadNs,
    #[doc = "SCRATCHPAD_S"]
    pub scratchpad_s: ScratchpadS,
    #[doc = "SEMAILBOX_NS_HOST"]
    pub semailbox_ns_host: SemailboxNsHost,
    #[doc = "SEMAILBOX_S_HOST"]
    pub semailbox_s_host: SemailboxSHost,
    #[doc = "SMU_NS"]
    pub smu_ns: SmuNs,
    #[doc = "SMU_NS_CFGNS"]
    pub smu_ns_cfgns: SmuNsCfgns,
    #[doc = "SMU_S"]
    pub smu_s: SmuS,
    #[doc = "SMU_S_CFGNS"]
    pub smu_s_cfgns: SmuSCfgns,
    #[doc = "SYSCFG_NS"]
    pub syscfg_ns: SyscfgNs,
    #[doc = "SYSCFG_NS_CFGNS"]
    pub syscfg_ns_cfgns: SyscfgNsCfgns,
    #[doc = "SYSCFG_S"]
    pub syscfg_s: SyscfgS,
    #[doc = "SYSCFG_S_CFGNS"]
    pub syscfg_s_cfgns: SyscfgSCfgns,
    #[doc = "SYSRTC0_NS"]
    pub sysrtc0_ns: Sysrtc0Ns,
    #[doc = "SYSRTC0_S"]
    pub sysrtc0_s: Sysrtc0S,
    #[doc = "TIMER0_NS"]
    pub timer0_ns: Timer0Ns,
    #[doc = "TIMER0_S"]
    pub timer0_s: Timer0S,
    #[doc = "TIMER1_NS"]
    pub timer1_ns: Timer1Ns,
    #[doc = "TIMER1_S"]
    pub timer1_s: Timer1S,
    #[doc = "TIMER2_NS"]
    pub timer2_ns: Timer2Ns,
    #[doc = "TIMER2_S"]
    pub timer2_s: Timer2S,
    #[doc = "TIMER3_NS"]
    pub timer3_ns: Timer3Ns,
    #[doc = "TIMER3_S"]
    pub timer3_s: Timer3S,
    #[doc = "TIMER4_NS"]
    pub timer4_ns: Timer4Ns,
    #[doc = "TIMER4_S"]
    pub timer4_s: Timer4S,
    #[doc = "TIMER5_NS"]
    pub timer5_ns: Timer5Ns,
    #[doc = "TIMER5_S"]
    pub timer5_s: Timer5S,
    #[doc = "TIMER6_NS"]
    pub timer6_ns: Timer6Ns,
    #[doc = "TIMER6_S"]
    pub timer6_s: Timer6S,
    #[doc = "TIMER7_NS"]
    pub timer7_ns: Timer7Ns,
    #[doc = "TIMER7_S"]
    pub timer7_s: Timer7S,
    #[doc = "ULFRCO_NS"]
    pub ulfrco_ns: UlfrcoNs,
    #[doc = "ULFRCO_S"]
    pub ulfrco_s: UlfrcoS,
    // #[doc = "USBAHB_NS_AHBS"]
    // pub usbahb_ns_ahbs: UsbahbNsAhbs,
    // #[doc = "USBAHB_S_AHBS"]
    // pub usbahb_s_ahbs: UsbahbSAhbs,
    #[doc = "USBPLL0_NS"]
    pub usbpll0_ns: Usbpll0Ns,
    #[doc = "USBPLL0_S"]
    pub usbpll0_s: Usbpll0S,
    #[doc = "USB_NS_APBS"]
    pub usb_ns_apbs: UsbNsApbs,
    #[doc = "USB_S_APBS"]
    pub usb_s_apbs: UsbSApbs,
    #[doc = "VDAC0_NS"]
    pub vdac0_ns: Vdac0Ns,
    #[doc = "VDAC0_S"]
    pub vdac0_s: Vdac0S,
    #[doc = "WDOG0_NS"]
    pub wdog0_ns: Wdog0Ns,
    #[doc = "WDOG0_S"]
    pub wdog0_s: Wdog0S,
    #[doc = "WDOG1_NS"]
    pub wdog1_ns: Wdog1Ns,
    #[doc = "WDOG1_S"]
    pub wdog1_s: Wdog1S,
    #[doc = "DEVINFO"]
    pub devinfo: Devinfo,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "cs")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        unsafe {
            DEVICE_PERIPHERALS = true;
            Peripherals {
                acmp0_ns: Acmp0Ns::steal(),
                acmp0_s: Acmp0S::steal(),
                acmp1_ns: Acmp1Ns::steal(),
                acmp1_s: Acmp1S::steal(),
                bufc_ns: BufcNs::steal(),
                bufc_s: BufcS::steal(),
                buram_ns: BuramNs::steal(),
                buram_s: BuramS::steal(),
                burtc_ns: BurtcNs::steal(),
                burtc_s: BurtcS::steal(),
                cmu_ns: CmuNs::steal(),
                cmu_s: CmuS::steal(),
                dcdc_ns: DcdcNs::steal(),
                dcdc_s: DcdcS::steal(),
                dmem_ns: DmemNs::steal(),
                dmem_s: DmemS::steal(),
                dpll0_ns: Dpll0Ns::steal(),
                dpll0_s: Dpll0S::steal(),
                emu_ns: EmuNs::steal(),
                emu_s: EmuS::steal(),
                etampdet_ns: EtampdetNs::steal(),
                etampdet_s: EtampdetS::steal(),
                eusart0_ns: Eusart0Ns::steal(),
                eusart0_s: Eusart0S::steal(),
                eusart1_ns: Eusart1Ns::steal(),
                eusart1_s: Eusart1S::steal(),
                eusart2_ns: Eusart2Ns::steal(),
                eusart2_s: Eusart2S::steal(),
                eusart3_ns: Eusart3Ns::steal(),
                eusart3_s: Eusart3S::steal(),
                eusart4_ns: Eusart4Ns::steal(),
                eusart4_s: Eusart4S::steal(),
                fsrco_ns: FsrcoNs::steal(),
                fsrco_s: FsrcoS::steal(),
                gpcrc_ns: GpcrcNs::steal(),
                gpcrc_s: GpcrcS::steal(),
                gpio_ns: GpioNs::steal(),
                gpio_s: GpioS::steal(),
                hfrco0_ns: Hfrco0Ns::steal(),
                hfrco0_s: Hfrco0S::steal(),
                hfrcoem23_ns: Hfrcoem23Ns::steal(),
                hfrcoem23_s: Hfrcoem23S::steal(),
                hfxo0_ns: Hfxo0Ns::steal(),
                hfxo0_s: Hfxo0S::steal(),
                hostmailbox_ns: HostmailboxNs::steal(),
                hostmailbox_s: HostmailboxS::steal(),
                i2c0_ns: I2c0Ns::steal(),
                i2c0_s: I2c0S::steal(),
                i2c1_ns: I2c1Ns::steal(),
                i2c1_s: I2c1S::steal(),
                iadc0_ns: Iadc0Ns::steal(),
                iadc0_s: Iadc0S::steal(),
                icache0_ns: Icache0Ns::steal(),
                icache0_s: Icache0S::steal(),
                ldmaxbar_ns: LdmaxbarNs::steal(),
                ldmaxbar_s: LdmaxbarS::steal(),
                ldma_ns: LdmaNs::steal(),
                ldma_s: LdmaS::steal(),
                // lesense_ns: LesenseNs::steal(),
                // lesense_s: LesenseS::steal(),
                letimer0_ns: Letimer0Ns::steal(),
                letimer0_s: Letimer0S::steal(),
                lfrco_ns: LfrcoNs::steal(),
                lfrco_s: LfrcoS::steal(),
                lfxo_ns: LfxoNs::steal(),
                lfxo_s: LfxoS::steal(),
                mpahbram_ns: MpahbramNs::steal(),
                mpahbram_s: MpahbramS::steal(),
                msc_ns: MscNs::steal(),
                msc_s: MscS::steal(),
                pcnt0_ns: Pcnt0Ns::steal(),
                pcnt0_s: Pcnt0S::steal(),
                pfmxpprf_ns: PfmxpprfNs::steal(),
                pfmxpprf_s: PfmxpprfS::steal(),
                prs_ns: PrsNs::steal(),
                prs_s: PrsS::steal(),
                radioaes_ns: RadioaesNs::steal(),
                radioaes_s: RadioaesS::steal(),
                rffpll0_ns: Rffpll0Ns::steal(),
                rffpll0_s: Rffpll0S::steal(),
                scratchpad_ns: ScratchpadNs::steal(),
                scratchpad_s: ScratchpadS::steal(),
                semailbox_ns_host: SemailboxNsHost::steal(),
                semailbox_s_host: SemailboxSHost::steal(),
                smu_ns: SmuNs::steal(),
                smu_ns_cfgns: SmuNsCfgns::steal(),
                smu_s: SmuS::steal(),
                smu_s_cfgns: SmuSCfgns::steal(),
                syscfg_ns: SyscfgNs::steal(),
                syscfg_ns_cfgns: SyscfgNsCfgns::steal(),
                syscfg_s: SyscfgS::steal(),
                syscfg_s_cfgns: SyscfgSCfgns::steal(),
                sysrtc0_ns: Sysrtc0Ns::steal(),
                sysrtc0_s: Sysrtc0S::steal(),
                timer0_ns: Timer0Ns::steal(),
                timer0_s: Timer0S::steal(),
                timer1_ns: Timer1Ns::steal(),
                timer1_s: Timer1S::steal(),
                timer2_ns: Timer2Ns::steal(),
                timer2_s: Timer2S::steal(),
                timer3_ns: Timer3Ns::steal(),
                timer3_s: Timer3S::steal(),
                timer4_ns: Timer4Ns::steal(),
                timer4_s: Timer4S::steal(),
                timer5_ns: Timer5Ns::steal(),
                timer5_s: Timer5S::steal(),
                timer6_ns: Timer6Ns::steal(),
                timer6_s: Timer6S::steal(),
                timer7_ns: Timer7Ns::steal(),
                timer7_s: Timer7S::steal(),
                ulfrco_ns: UlfrcoNs::steal(),
                ulfrco_s: UlfrcoS::steal(),
                // usbahb_ns_ahbs: UsbahbNsAhbs::steal(),
                // usbahb_s_ahbs: UsbahbSAhbs::steal(),
                usbpll0_ns: Usbpll0Ns::steal(),
                usbpll0_s: Usbpll0S::steal(),
                usb_ns_apbs: UsbNsApbs::steal(),
                usb_s_apbs: UsbSApbs::steal(),
                vdac0_ns: Vdac0Ns::steal(),
                vdac0_s: Vdac0S::steal(),
                wdog0_ns: Wdog0Ns::steal(),
                wdog0_s: Wdog0S::steal(),
                wdog1_ns: Wdog1Ns::steal(),
                wdog1_s: Wdog1S::steal(),
                devinfo: Devinfo::steal(),
            }
        }
    }
}
